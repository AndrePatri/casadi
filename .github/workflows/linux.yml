name: Linux Binaries

on:
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'
  release:
    types: ['released', 'prereleased']

env:
  PYTHON_VERSION: '3.10'

jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:jammy
    strategy:
      matrix:
        host: [x86_64-centos7-linux-gnu, aarch64-rpi3-linux-gnu]
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CCACHE_DIR: /root/.ccache
    steps:
      # Git clone
      - name: Install git
        run: apt -y update && apt -y install --no-install-recommends git ca-certificates
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # Tools
      - name: Install tools
        uses: ./.github/workflows/toolchain
        with:
          host: ${{ matrix.host }}
          python-version: ${{ env.PYTHON_VERSION }}
      # Ccache
      - name: Prepare ccache directory
        run: mkdir -p "${{ env.CCACHE_DIR }}"
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-linux-bin-${{ matrix.host }}-ccache-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-linux-bin-${{ matrix.host }}-ccache
      # Configure
      - name: Configure
        run: |
          host="${{ matrix.host }}"
          staging="/opt/$host"
          case $host in
            aarch64*) quadmath=Off ;;
            *)        quadmath=On ;;
          esac
          cmake -B package -S. \
            -G "Ninja Multi-Config" \
            -D BUILD_SHARED_LIBS=On \
            -D CMAKE_POSITION_INDEPENDENT_CODE=On \
            -D CMAKE_SHARED_LINKER_FLAGS_RELEASE=-s \
            -D ALPAQA_WITH_EXAMPLES=Off \
            -D ALPAQA_WITH_TESTS=Off \
            -D ALPAQA_WARNINGS_AS_ERRORS=On \
            -D ALPAQA_WITH_QUAD_PRECISION=$quadmath \
            -D ALPAQA_WITH_CASADI=On \
            -D CMAKE_TOOLCHAIN_FILE="$staging/cmake/$host.toolchain.cmake" \
            -D CMAKE_FIND_ROOT_PATH="$staging/eigen-master;$staging/casadi"
        env:
          CFLAGS: '-static-libgcc'
          CXXFLAGS: '-static-libgcc -static-libstdc++'
      # Build
      - name: Build Release
        run: |
          cmake --build package --config Release -j
      - name: Build Debug
        run: |
          cmake --build package --config Debug -j
      # Package
      - name: Package
        run: |
          cpack -G 'TGZ;DEB' -C "Release;Debug"
        working-directory: package
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: alpaqa-${{ matrix.host }}
          path: |
            package/alpaqa*.tar.gz
            package/alpaqa*.deb

  test:
    needs: [build]
    runs-on: ubuntu-latest
    container: ubuntu:jammy
    strategy:
      matrix:
        host: [x86_64-centos7-linux-gnu]
    steps:
      # Git clone
      - name: Install git
        run: apt -y update && apt -y install --no-install-recommends git ca-certificates g++ gfortran cmake ninja-build python3-pip
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install CasADi, NumPy
        run: python3 -m pip install casadi numpy
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: alpaqa-${{ matrix.host }}
          path: package
      - name: Install
        run: |
          tar xzf package/alpaqa*.tar.gz --strip-components 1 -C /usr/local
          ldconfig
      - name: Install dependencies
        run: |
          ./scripts/install-eigen.sh /usr/local
          ./scripts/install-gtest.sh /usr/local
      - name: Build examples (Release)
        run: |
          cmake -B build-examples -S examples \
            -G "Ninja Multi-Config"
          cmake --build build-examples -j --config Release
      - name: Build tests (Release)
        run: |
          cmake -B build-tests -S test \
            -G "Ninja Multi-Config"
          cmake --build build-tests -j --config Release
      - name: Upload (Release)
        uses: actions/upload-artifact@v2
        with:
          name: alpaqa-${{ matrix.host }}-test-examples-release
          path: |
            build-examples/C++/CustomCppProblem/Release/custom-cpp-problem-example
            build-examples/C++/FortranProblem/Release/fortran-problem-example
            build-examples/C++/DLProblem/Release/dl-problem-example
            build-examples/C++/DLProblem/Release/test-matmul
            build-tests/Release/tests
      - name: Build examples (Debug)
        run: |
          cmake --build build-examples -j --config Debug
      - name: Build tests (Debug)
        run: |
          cmake --build build-tests -j --config Debug
      - name: Upload (Debug)
        uses: actions/upload-artifact@v2
        with:
          name: alpaqa-${{ matrix.host }}-test-examples-debug
          path: |
            build-examples/C++/CustomCppProblem/Debug/custom-cpp-problem-example
            build-examples/C++/FortranProblem/Debug/fortran-problem-example
            build-examples/C++/DLProblem/Debug/dl-problem-example
            build-examples/C++/DLProblem/Debug/test-matmul
            build-tests/Debug/tests
      - name: Run examples (Release)
        run: |
          ./build-examples/C++/CustomCppProblem/Release/custom-cpp-problem-example
          ./build-examples/C++/FortranProblem/Release/fortran-problem-example
          ./build-examples/C++/DLProblem/Release/dl-problem-example
          ./build-examples/C++/DLProblem/Release/test-matmul
      - name: Run examples (Debug)
        run: |
          ./build-examples/C++/CustomCppProblem/Debug/custom-cpp-problem-example
          ./build-examples/C++/FortranProblem/Debug/fortran-problem-example
          ./build-examples/C++/DLProblem/Debug/dl-problem-example
          ./build-examples/C++/DLProblem/Debug/test-matmul
      - name: Run tests (Release)
        run: |
          cmake --build build-tests -t test --config Release
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
      - name: Run tests (Debug)
        run: |
          cmake --build build-tests -t test --config Debug
        env:
          CTEST_OUTPUT_ON_FAILURE: 1

  release:
    if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: [x86_64-centos7-linux-gnu, aarch64-rpi3-linux-gnu]
    steps:
    - name: Download
      uses: actions/download-artifact@v2
      with:
        name: alpaqa-${{ matrix.host }}
        path: package
    - name: Release
      uses: softprops/action-gh-release@17cd0d34deddf848fc0e7d9be5202c148c270a0a
      with:
        files: |
          package/alpaqa*.tar.gz
          package/alpaqa*.deb
