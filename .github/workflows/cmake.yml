name: source_package

on: push


jobs:
  swig:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: jgillis
          password: ${{ secrets.GITHUB_TOKEN }}
          
    - name: generate Python 2
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON  .. && make python_source && cd .. && rm -rf build"
        
    - name: generate Python 3
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON3=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON  .. && make python_source && cd .. && rm -rf build"

    - name: generate Matlab
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_MATLAB=ON -DSWIG_EXPORT=ON  .. && make matlab_source && cd .. && rm -rf build"
    
    - name: set CMAKE default options
      run: |
         sed -i 's/option(SWIG_IMPORT "Export SWIG" OFF)/option(SWIG_IMPORT "Import SWIG" ON)/g' CMakeLists.txt

    - name: build archives
      run: |
        zip -rq ../casadi_source.zip . --exclude '.*' --exclude '*/.*' --exclude 'appveyor.yml'
        mv ../casadi_source.zip casadi_source.zip
      
    - uses: actions/upload-artifact@v2.2.4
      with:
        name: casadi_source_wrapper
        path: casadi_source.zip
          
  core-osx:
    runs-on: ${{matrix.image}}
    strategy:
      fail-fast: false
      matrix:
        image: [macos-10.15,macos-11]
    env:
      CONDA_BUILD_SYSROOT: /opt/MacOSX10.9.sdk
    steps:
      - name: Setup conda
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: 3.8
          conda-channels: anaconda, conda-forge
      - run: |
             # https://stackoverflow.com/questions/69236331/conda-macos-big-sur-ld-unsupported-tapi-file-type-tapi-tbd-in-yaml-file
             wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.9.sdk.tar.xz
             sudo tar xf MacOSX10.9.sdk.tar.xz -C /opt
             
             conda install -y -c conda-forge c-compiler==1.0.4 cxx-compiler==1.0.4 fortran-compiler==1.0.4
             echo "CC=/usr/local/miniconda/envs/$CONDA_DEFAULT_ENV/bin/x86_64-apple-darwin13.4.0-clang" >> $GITHUB_ENV
             echo "CXX=/usr/local/miniconda/envs/$CONDA_DEFAULT_ENV/bin/x86_64-apple-darwin13.4.0-clang++" >> $GITHUB_ENV
             echo "FC=/usr/local/miniconda/envs/$CONDA_DEFAULT_ENV/bin/gfortran" >> $GITHUB_ENV
             ls /usr/local/miniconda/envs/$CONDA_DEFAULT_ENV/bin
             echo "lib dir"
             ls /usr/local/miniconda/envs/$CONDA_DEFAULT_ENV/lib
      - uses: actions/checkout@v2.4.0
      - name: Cache build dir
        uses: actions/cache@v2
        with:
          key: core-build-macos-10.15-v1
          path: build
      - name: Build
        run: |
          CC=${{ env.CC }} FC=${{ env.FC }} CXX=${{ env.CXX }} cmake -Bbuild -DWITH_SELFCONTAINED=ON -DWITH_IPOPT=ON -DCMAKE_Fortran_USE_RESPONSE_FILE_FOR_OBJECTS=1 -H.
          CC=${{ env.CC }} FC=${{ env.FC }} CXX=${{ env.CXX }} cmake --build build -v
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.job }}-${{matrix.image}}
          path: build
          retention-days: 1
          
  core-dockcross:
    runs-on: ubuntu-20.04
    if: true
    strategy:
      fail-fast: false
      matrix:
        target: [manylinux1-x64,manylinux1-x86,manylinux2014-x64,manylinux2014-x86,windows-shared-x64-posix]
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Setup dockcross
        run: |
          docker pull dockcross/${{ matrix.target }}:latest
          docker run --rm dockcross/${{ matrix.target }} > dockcross
          chmod +x dockcross
          pwd
          ls -al dockcross
      - name: Cache build dir
        uses: actions/cache@v2
        with:
          key: core-build-${{ matrix.target }}-v3
          path: build
      - name: Build
        run: |
          pwd
          ls -al
          ./dockcross cmake -Bbuild -DWITH_SELFCONTAINED=ON -DWITH_IPOPT=ON -DCMAKE_BUILD_TYPE=Debug -H.
          ./dockcross cmake --build build -v
      - name: Easy Zip Files - fails to ignore some bad symlinks
        if: false
        uses: vimtor/action-zip@v1
        with:
          files: build/
          recursive: false
          dest: ${{github.job}}-${{matrix.target}}.zip
      - run: zip -rq ${{github.job}}-${{matrix.target}}.zip build
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{github.job}}-${{ matrix.target}}
          path: ${{github.job}}-${{matrix.target}}.zip
          retention-days: 1
          
  interfaces-manylinux1_x86_64:
    needs: [core-dockcross]
    runs-on: ubuntu-20.04
    steps:
      - run: echo "hello"
  
  matrix-arch-py2:
    runs-on: ubuntu-latest
    steps:
      - id: build-matrix
        uses: jgillis/setup-build-matrix@v1.2.0
        with:
          config: |
            matrix:
              arch: [manylinux1-x64,manylinux1-x86]
              py2: ["27","35","36","37","38","39"]
            operations:
              - type: append
                matrix:
                  arch: [manylinux2014-x64,manylinux2014-x86]
                  py2: ["310"]
              - type: append
                matrix:
                  arch: [windows-shared-x64-posix]
                  py2: ["27","35","36","37","38","39","310"]
              #- type: append
              #  matrix:
              #    arch: [manylinux2014-aarch64]
              #    py2: ["35","36","37","38","39"]
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
  
  frontend_python-osx:
    needs: [core-osx,swig]
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image: [macos-10.15,macos-11]
        py2: ["27","35","36","37","38","39","310"]
  
    steps:
      - id: get-id
        uses: actions/github-script@v5.0.0
        env:
          py2: "${{ matrix.py2 }}"
        with:
          result-encoding: string
          script: |
            const { py2 } = process.env;
            const major = py2.substr(0,1);
            const minor = py2.substr(1);
            core.setOutput('pydot2', major+"."+minor)
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{steps.get-id.outputs.pydot2}}
      - name: Setup conda
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: 3.8
          conda-channels: anaconda, conda-forge
      - uses: actions/download-artifact@v2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - uses: actions/download-artifact@v2
        with:
          name: core-osx-${{ matrix.image }}
      - run: unzip core-osx-${{ matrix.image }}.zip
      - name: Build
        run: |
          cmake -Bbuild -DWITH_PYTHON=ON -USWIG_IMPORT -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install
          cmake --build build --target install -v
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        with:
          files: install/
          recursive: false
          dest: ${{github.job}}-${{matrix.image}}-py${{matrix.py2}}.zip
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{github.job}}-${{matrix.image}}-py${{matrix.py2}}
          path: ${{github.job}}-${{matrix.image}}-py${{matrix.py2}}.zip
          retention-days: 1


  frontend_python-dockcross:
    needs: [core-dockcross,matrix-arch-py2,swig]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-arch-py2.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - run: cat CMakeLists.txt
      - uses: actions/download-artifact@v2
        with:
          name: core-dockcross-${{ matrix.arch }}
      - run: ls
      - run: unzip core-dockcross-${{ matrix.arch }}.zip
      - name: Setup dockcross
        run: |
          docker pull dockcross/${{ matrix.arch }}:latest
          docker run --rm dockcross/${{ matrix.arch }}:latest > dockcross
          chmod +x dockcross
      - run: echo ${{env.GITHUB_WORKSPACE}}
      - run: cat $GITHUB_ENV
      - run: |
          echo -n "PYTHON_INCLUDE_DIR=" >> $GITHUB_ENV && ./dockcross bash -c "ls -d /opt/python/cp${{ matrix.py2 }}*/include/python* | head -n 1" >> $GITHUB_ENV && tail $GITHUB_ENV
      - name: (windows target only) get Python
        if: contains(matrix.arch, 'windows')
        run: |
          archx=$(python -c "print([e for e in '${{matrix.arch}}'.split('-') if e.startswith('x')][0])")
          wget https://github.com/casadi/artifacts/releases/download/evergreen/windows_python${{ matrix.py2 }}_$archx.zip -O python.zip && unzip python.zip -d python
          pwd
          tree python
          echo "PYTHON_INCLUDE_DIR=/work/python/include" >> $GITHUB_ENV
          echo "PYTHON_LIBRARIES=/work/python/libs/python${{ matrix.py2 }}.lib" >> $GITHUB_ENV
      - name: Build
        run: |
          ./dockcross cmake -Bbuild -DWITH_PYTHON=ON -DPYTHON_LIBRARIES=${{ env.PYTHON_LIBRARIES}} -DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -USWIG_IMPORT  -DCMAKE_INSTALL_PREFIX=/work/install
          ./dockcross cmake --build build --target install -v
      - uses: kanga333/variable-mapper@v0.2.2
        with:
          key: "${{matrix.arch}}"
          map: |
           {
              "manylinux1-x64": {"os": "linux64"},
              "manylinux1-x86": {"os": "linux32"},
              "manylinux2014-x64": {"os": "linux64"},
              "manylinux2014-x86": {"os": "linux32"},
              "windows-shared-x64-posix": {"os": "windows64"}
           }
          export_to: env
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        with:
          files: install/
          recursive: false
          dest: casadi-${{env.os}}-py${{matrix.py2}}.zip
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: casadi-${{env.os}}-py${{matrix.py2}}
          path: casadi-${{env.os}}-py${{matrix.py2}}.zip
          retention-days: 1

  test-python:
    runs-on: ${{matrix.image}}
    needs: [frontend_python-dockcross]
    strategy:
     fail-fast: false
     matrix:
       py2: ["27","35","36","37","38","39","310"]
       image: ["windows-latest","ubuntu-latest"]
       bit: [64]
       exclude:
        # No Windows 32bit builds currently
        - image: "windows-latest"
          bit: 32
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: kanga333/variable-mapper@v0.2.2
        with:
          key: "${{matrix.image}}"
          map: |
           {
              "windows-latest": {"os": "windows"},
              "ubuntu-latest": {"os": "linux"}
           }
          export_to: env
      - uses: actions/download-artifact@v2
        with:
          name: casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}
      - run: ls
      - name: Unpack source
        run: unzip casadi-${{env.os}}${{matrix.bit}}-py${{matrix.py2}}.zip
      - run: ls
      - id: get-id
        uses: actions/github-script@v5.0.0
        env:
          py2: "${{ matrix.py2 }}"
        with:
          result-encoding: string
          script: |
            const { py2 } = process.env;
            const major = py2.substr(0,1);
            const minor = py2.substr(1);
            core.setOutput('pydot2', major+"."+minor)
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{steps.get-id.outputs.pydot2}}
      - if: contains(matrix.arch, 'windows')
        run: |
          cd test/python
          pip install numpy
          set PYTHONPATH=${{ github.workspace }}/install
          python alltests.py
      - if: "!contains(matrix.arch, 'windows')"
        run: |
          cd test/python
          pip install numpy
          PYTHONPATH=${{ github.workspace }}/install python alltests.py

  frontend_matlab-manylinux1_x86_64:
    needs: [core-dockcross,swig]
    runs-on: ubuntu-20.04
    steps:
      - run: echo "hello"
      
  linux-python:
    needs: [interfaces-manylinux1_x86_64,frontend_python-dockcross]
    runs-on: ubuntu-20.04
    steps:
    - run: echo "hello"
    

    
  core-windows:
    runs-on: windows-latest
    if: false
    strategy:
      fail-fast: false
      matrix:
        arch: [x64,Win32]
    steps:
      - uses: actions/checkout@v2.4.0
      - name : Build
        run: |
            cmake -Bbuild -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -DWITH_SELFCONTAINED=ON -DCMAKE_INSTALL_PREFIX=install
            cmake --build build --target install --config Release -v

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.job }}-${{ matrix.arch }}
          path: build
          retention-days: 1

      - name: Build
        run: |
          cmake -Bbuild -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -DWITH_SELFCONTAINED=ON -USWIG_IMPORT
          cmake --build build --config Release -v
      - run: echo "hello"

  frontend_python-windows:
    runs-on: windows-latest
    if: false
    needs: [swig,core-windows]
    strategy:
      fail-fast: false
      matrix:
        arch: [x64,Win32]
        py2: ["27","35","36","37","38","39","310"]
    steps:
      - id: get-id
        uses: actions/github-script@v5.0.0
        env:
          py2: "${{ matrix.py2 }}"
        with:
          result-encoding: string
          script: |
            const { py2 } = process.env;
            const major = py2.substr(0,1);
            const minor = py2.substr(1);
            core.setOutput('pydot2', major+"."+minor)
      - run: echo "${{steps.get-id.outputs.pydot2}}"
      - uses: actions/download-artifact@v2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - uses: actions/download-artifact@v2
        with:
          name: core-windows-${{ matrix.arch }}
          path: build
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{steps.get-id.outputs.pydot2}}
      - name: Build
        run: |
          cmake -Bbuild -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -DWITH_PYTHON=ON -USWIG_IMPORT -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install
          cmake --build build --target install --config Release -v
      - name: (windows only) copy dlls
        run: ./dockcross bash -c "cp /usr/src/mxe/usr/\$CROSS_TRIPLE/bin/*.dll install/casadi"
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ github.job }}-${{ matrix.arch}}-py${{ matrix.py2}}
          path: install
          retention-days: 1
      
  windows_matlab:
    runs-on: windows-2016
    needs: swig
    if: false
    env:
      bitness: 64
      compiler: vs2017
    

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: casadi_source_wrapper

    - uses: meco-group/mockups@master
      with:
        tag: win${{ENV.bitness}}_${{ENV.compiler}}

    - name: Unpack source
      run: unzip casadi_source.zip

    - name: Dir source
      run: echo ${{ENV.MATLAB_ROOT}}

    - name : cmake
      run: |
          cmake -B ${{github.workspace}}/build -G "Visual Studio 15 2017" -A x64 -DWITH_SELFCONTAINED=ON -DWITH_MATLAB=ON -DMATLAB_ROOT=${{ENV.MATLAB_ROOT}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install
          cmake --build ${{github.workspace}}/build --target install --config Release

    - name: build archives
      run: |
        7z a ${{github.workspace}}/casadi_windows_matlab.zip ${{github.workspace}}/install/*
      
    - uses: actions/upload-artifact@v2.2.4
      with:
        name: casadi_windows_matlab
        path: ${{github.workspace}}/casadi_windows_matlab.zip
      
